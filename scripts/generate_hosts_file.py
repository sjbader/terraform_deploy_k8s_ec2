#!/usr/bin/python3
#
# This script will take the information created by user_data
# and generate a file suitable for use in /etc/hosts
#
#
# The tools we'll use
import os
import configparser
info = configparser.ConfigParser()


# Open config file generated by Terraform
info.read('/provisioning_info.txt')

# Load our variables from the configuration file, split them when necessary
lab = info.get('DEFAULT', 'lab')
master_hostnames = info.get('DEFAULT', 'master_hostnames').split(",")
master_ips = info.get('DEFAULT', 'master_ips').split(",")
worker_hostnames = info.get('DEFAULT', 'worker_hostnames').split(",")
worker_ips = info.get('DEFAULT', 'worker_ips').split(",")

# Make sure the sizes of our lists match
if len(master_hostnames) != len(master_ips):
    print("Master: Number of hostnames does not match number of IPs")
    exit()

if len(worker_hostnames) != len(worker_ips):
    print("Worker: Number of hostnames does not match number of IPs")
    exit()

# Create output dir
if not os.path.exists('./output'):
    os.mkdir('./output')

# Write our host entries to a file
hosts = open("./output/hosts.txt", "w")

# Write localhost info
hosts.write("127.0.0.1            localhost localhost.localdomain")
hosts.write(" localhost4 localhost4.localdomain4\n")
hosts.write("::1                  localhost6 localhost6.localdomain6\n")

# Create our hosts file entries for master nodes
i = 0
while(i < len(master_ips)):
    ip_addr = master_ips[i].ljust(20)
    hosts.write(f"{ip_addr} {master_hostnames[i]} pod{lab}-master{i+1}\n")
    i += 1

# Create our hosts file entries for worker nodes
i = 0
while(i < len(worker_ips)):
    ip_addr = worker_ips[i].ljust(20)
    hosts.write(f"{ip_addr} {worker_hostnames[i]} pod{lab}-worker{i+1}\n")
    i += 1

# Close file
hosts.close()